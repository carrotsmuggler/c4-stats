#!/usr/bin/env python3

import sys
import subprocess
import csv
import urllib.request
from io import StringIO
import json
import argparse
import dateutil.parser
import datetime

CODE_ARENA="https://raw.githubusercontent.com/code-423n4/code423n4.com/main/_data"

FINDINGS_URL=f"{CODE_ARENA}/findings/findings.csv"
CONTESTS_URL=f"{CODE_ARENA}/contests/contests.csv"

parser = argparse.ArgumentParser(prog="c4-stats", formatter_class=argparse.RawTextHelpFormatter)
subp = parser.add_subparsers(dest="command") # dest="command" means that we see which command was parsed

statsp = subp.add_parser("basic", description="Basic statistics")
statsp.add_argument('warden',type=str, nargs='+')

distribp = subp.add_parser("by-contest", description="Show award for each contest in descending order of award")
distribp.add_argument('warden', type=str, nargs='+')

ginip = subp.add_parser("gini",
  description='Calculate the Gini coefficient for the entire competition\n' +
              '0 is complete equality of result, 1 is all awards going to one person\n'+
              '(https://en.wikipedia.org/wiki/Gini_coefficient)',
              formatter_class=argparse.RawTextHelpFormatter)

giniWardens = subp.add_parser("gini-wardens",
  description='Calculate the Gini coefficient for one or more wardens where each contest\n'+
              'is treated as an individual. The closer to 0 the more consistent a\n'+
              'warden is.',
  formatter_class=argparse.RawTextHelpFormatter)
giniWardens.add_argument('warden', type=str, nargs='+')

ns = parser.parse_args(sys.argv[1:])

#
# Functions
#
def get_records(url):
  response = urllib.request.urlopen(url)
  csv_data = response.read()
  rs = []
  file = StringIO(bytes.decode(csv_data, "UTF-8"))
  csvr = csv.reader(file)
  headers = next(csvr, None)

  for row in csvr:
    r = {}
    for i in range(0, len(headers)):
      r[headers[i]] = row[i]
    rs.append(r)
  return rs

findings_records = get_records(FINDINGS_URL)
contest_records=get_records(CONTESTS_URL)

def make_contest_hash(rs):
  result = {}
  for r in rs:
    result[r['contestid']] = r
  return result

contest_hash = make_contest_hash(contest_records)

def ppUSD(n):
  return '${:0,.2f}'.format(round(n, 2))

def ppMonth(str):
  dt = dateutil.parser.parse(str)
  return dt.strftime("%B %Y")

def basic_stats():
  stats = { }
  lastContest = 0
  for r in findings_records:
    lastContest = r["contest"]
    if r["handle"]:
      handle = r["handle"]
      if not handle in stats:
        stats[handle] = { "handle": handle, "contests": 0, "highs": 0, "mediums": 0, "qaReports": 0, "gasReports": 0, "submissions": 0, "total": 0, "lastContest": 0 }
      if lastContest != stats[handle]["lastContest"]:
        stats[handle]["contests"] += 1
        stats[handle]["lastContest"] = lastContest
      if r["finding"][0:1] == "H":
        stats[handle]["highs"] += 1
      if r["finding"][0:1] == "M":
        stats[handle]["mediums"] += 1
      if r["finding"][0:1] == "Q":
        stats[handle]["qaReports"] += 1
      if r["finding"][0:1] == "G":
        stats[handle]["gasReports"] += 1
      stats[handle]["submissions"] += 1
      stats[handle]["total"] += float(r["awardUSD"])

  for h in stats.keys():
    del stats[h]["lastContest"]
    stats[h]["averagePerContest"] = ppUSD(stats[h]["total"] / stats[h]["contests"])
    stats[h]["averagePerSubmission"] = ppUSD(stats[h]["total"] / stats[h]["submissions"])
    stats[h]["total"] = ppUSD(stats[h]["total"])


  # Collate results
  results = []
  for warden in ns.warden:
    if warden in stats:
      results.append(stats[warden])
    else:
      results.append({ "error" : f"Warden '{warden}' has not competed" })
  return results


def byContest(wardens):
  results = []
  for warden in wardens:
    stats = []
    h = {}
    for r in findings_records:
      if r['handle'] and r['handle'] == warden:
        award = float(r['awardUSD'])
        if not r['contest'] in h:
          c = contest_hash[r['contest']]
          h[r['contest']] = { 'contest' : c['title'], 'amount': c['amount'], 'date': ppMonth(c['start_time']), 'awardUSD' : 0.0 }
        h[r['contest']]['awardUSD'] += award
    for k in h:
      stats.append(h[k])
    stats.sort(key=lambda r: -float(r['awardUSD']))
    for s in stats:
      s['awardUSD'] = ppUSD(s['awardUSD'])
    results.append({ 'handle': warden, 'distribution': stats} if len(stats) > 0 else { 'error': f'Warden {warden} does not exist'})
  return results


#
# Calculates the Gini coefficient (https://en.wikipedia.org/wiki/Gini_coefficient)
#
# Takes
# - h, a dictionary mapping keys to sub-records.
# - amountKey, The key of the sub-record that returns a float amount
#
# Each record is regarded as an individual when calculating the Gini coefficient
#
def calculate_gini(h, amountKey):
  total = 0
  n = 0
  for i in h:
    total += h[i][amountKey]
    n += 1
  mean = total/n

  gini_numerator = 0.0
  # Now iterate through each warden and calculate the Gini coefficient
  for i in h:
    for j in h:
      gini_numerator += abs(h[i][amountKey] - h[j][amountKey])
  return gini_numerator / (2*n*n*mean)


#
# Calculates the gini coefficient of the entire competition since the beginning
#
def gini():
  h = {}
  for r in findings_records:
    handle = r['handle']
    if not handle in h:
      h[handle] = { 'handle': handle, 'awardUSD' : 0 }
    h[handle]['awardUSD'] += float(r['awardUSD'])
  # Now work out the mean
  total = 0.0
  n = 0
  result = calculate_gini(h, 'awardUSD')
  return { "gini" : result }

#
# Calculates the gini coefficient for a warden by treating each competition as a separate "person".
# Gives a measure of how unequally the contests pay-off for a specific warden.
#
def giniForWardens(handles):
  results = []
  for handle in handles:
    h = {}
    warden_found=False
    for r in findings_records:
      if r['handle'] == handle:
        warden_found=True
        cid  = r['contest']
        if not cid in h:
          h[cid] = { 'awardUSD': 0.0 }
        h[cid]['awardUSD'] += float(r['awardUSD'])
    if not warden_found:
      results.append({ 'error' : f'Warden {handle} does not exist'})
    else:
      gini = calculate_gini(h, 'awardUSD')
      results.append({ f"gini({handle})" : gini })
  return results

## Prints the records as valid JSON

if ns.command == "basic":
  result = basic_stats()
elif ns.command == "by-contest":
  result = byContest(ns.warden)
elif ns.command == "gini":
  result = gini()
elif ns.command == 'gini-wardens':
  result = giniForWardens(ns.warden)

print(json.dumps(result, indent=2))